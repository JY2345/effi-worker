name: Illjaler Deployment
on:
  workflow_dispatch:
  push: # push이벤트가 발생하면서 브랜치가 main일 경우와,
    branches:
      - main
      - board
  pull_request: # pull_request이벤트가 발생하면서 브랜치가 main | dev 인 경우에 workflow가 실행.
    branches:
      - main
      - dev
      - board
jobs:
  test:
    needs: lint
    runs-on: ubuntu-latest #우분투 환경에서 작업실행
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Get Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.YOUR_CUSTOM_GITHUB_TOKEN }}
      - name: Install NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --no-fund
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Get Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.YOUR_CUSTOM_GITHUB_TOKEN }}
      - name: Install NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --no-fund
      - name: Build website
        id: build-website
        run: npm run build
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploying
        run: echo 'Deploying...'
  lint:
    runs-on: ubuntu-latest #우분투 환경에서 작업실행
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Get Code
        uses: actions/checkout@v3 # github action의 checkout액션을 사용하여 현재 프로젝트의 코드를 가져옴. 레포지토리는 action/checkout
        with:
          token: ${{ secrets.YOUR_CUSTOM_GITHUB_TOKEN }}
      - name: Install NodeJs
        uses: actions/setup-node@v3 # node의 버전을 설정함. 레포지토리는 action/setup-node
        with:
          node-version: ${{ matrix.node-version }} # 버전은 matrix에서 설정한 3가지 버전이 병렬적으로 실행된다.
      - name: Cache dependencies
        id: cache #해당 결과를 사용하기 위해 고유 식별자 id를 설정. github Action의 output정보가 담김.
        uses: actions/cache@v3 # cache액션을 설정한다. 레포지토리는 actions/cache
        with:
          path: node_modules # cache할 디렉토리 경로를 설정.
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} # cache Key 설정. deps-node-modules-로 시작하는 문자열을 기반으로 package-lock.json 파일의 해시값을 계산하여 캐시 키로 사용. 이렇게 함으로써 package-lock.json 파일이 변경될 때마다 새로운 캐시 항목이 생성되어 새로운 의존성이 설치됨.
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true' # steps: 현재 단계 컨텍스트에 접근, cache:Cache dependencies의 고유 id, outputs.cache-hit: 출력값을 가져와서 true인지 아닌지 판별, true가 아니라면 package-lock.json 파일을 통해 정확한 종속성을 설치
        run: npm ci --no-fund
      - name: Lint Code
        run: npm run lint
